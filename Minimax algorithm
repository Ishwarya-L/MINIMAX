{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPwT/j3Wtz3o9LqtIF5neHW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ishwarya-L/MINIMAX/blob/main/Minimax%20algorithm\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qHILTFS2BOH8",
        "outputId": "968a7031-7df4-4c40-9884-bf11447872e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|   |   |   |\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "Enter your move (0-8): 1\n",
            "Computer places 'O' in position 0\n",
            "| O | X |   |\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "Enter your move (0-8): 6\n",
            "Computer places 'O' in position 4\n",
            "| O | X |   |\n",
            "|   | O |   |\n",
            "| X |   |   |\n",
            "Enter your move (0-8): 8\n",
            "Computer places 'O' in position 7\n",
            "| O | X |   |\n",
            "|   | O |   |\n",
            "| X | O | X |\n",
            "Enter your move (0-8): 5\n",
            "Computer places 'O' in position 2\n",
            "| O | X | O |\n",
            "|   | O | X |\n",
            "| X | O | X |\n",
            "Enter your move (0-8): 3\n",
            "| O | X | O |\n",
            "| X | O | X |\n",
            "| X | O | X |\n",
            "It's a tie!\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "# Define the board\n",
        "board = [' ' for _ in range(9)]\n",
        "\n",
        "# Function to print the board\n",
        "def print_board(board):\n",
        "    for row in [board[i*3:(i+1)*3] for i in range(3)]:\n",
        "        print('| ' + ' | '.join(row) + ' |')\n",
        "\n",
        "# Check for winner\n",
        "def winner(board, player):\n",
        "    win_combinations = [\n",
        "        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows\n",
        "        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns\n",
        "        [0, 4, 8], [2, 4, 6]              # diagonals\n",
        "    ]\n",
        "    return any(all(board[i] == player for i in combo) for combo in win_combinations)\n",
        "\n",
        "# Check if the board is full\n",
        "def is_full(board):\n",
        "    return ' ' not in board\n",
        "\n",
        "# Minimax algorithm\n",
        "def minimax(board, depth, is_maximizing):\n",
        "    if winner(board, 'O'):\n",
        "        return 1\n",
        "    elif winner(board, 'X'):\n",
        "        return -1\n",
        "    elif is_full(board):\n",
        "        return 0\n",
        "\n",
        "    if is_maximizing:\n",
        "        best_score = -math.inf\n",
        "        for i in range(9):\n",
        "            if board[i] == ' ':\n",
        "                board[i] = 'O'\n",
        "                score = minimax(board, depth + 1, False)\n",
        "                board[i] = ' '\n",
        "                best_score = max(score, best_score)\n",
        "        return best_score\n",
        "    else:\n",
        "        best_score = math.inf\n",
        "        for i in range(9):\n",
        "            if board[i] == ' ':\n",
        "                board[i] = 'X'\n",
        "                score = minimax(board, depth + 1, True)\n",
        "                board[i] = ' '\n",
        "                best_score = min(score, best_score)\n",
        "        return best_score\n",
        "\n",
        "# Find the best move\n",
        "def best_move(board):\n",
        "    best_score = -math.inf\n",
        "    move = None\n",
        "    for i in range(9):\n",
        "        if board[i] == ' ':\n",
        "            board[i] = 'O'\n",
        "            score = minimax(board, 0, False)\n",
        "            board[i] = ' '\n",
        "            if score > best_score:\n",
        "                best_score = score\n",
        "                move = i\n",
        "    return move\n",
        "\n",
        "# Example game play\n",
        "def play_game():\n",
        "    while True:\n",
        "        print_board(board)\n",
        "        x_move = int(input(\"Enter your move (0-8): \"))\n",
        "        if board[x_move] != ' ':\n",
        "            print(\"Invalid move.\")\n",
        "            continue\n",
        "        board[x_move] = 'X'\n",
        "\n",
        "        if winner(board, 'X'):\n",
        "            print_board(board)\n",
        "            print(\"You win!\")\n",
        "            break\n",
        "        if is_full(board):\n",
        "            print_board(board)\n",
        "            print(\"It's a tie!\")\n",
        "            break\n",
        "\n",
        "        o_move = best_move(board)\n",
        "        board[o_move] = 'O'\n",
        "        print(f\"Computer places 'O' in position {o_move}\")\n",
        "\n",
        "        if winner(board, 'O'):\n",
        "            print_board(board)\n",
        "            print(\"Computer wins!\")\n",
        "            break\n",
        "        if is_full(board):\n",
        "            print_board(board)\n",
        "            print(\"It's a tie!\")\n",
        "            break\n",
        "\n",
        "play_game()\n"
      ]
    }
  ]
}