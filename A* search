{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMk1vT1wrOW85qr2UfvDkjH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ishwarya-L/MINIMAX/blob/main/A*%20search\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P49jk5dpDrU9",
        "outputId": "47957e3d-be5f-462d-aba5-e92f13e26117"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path found:\n",
            "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]\n"
          ]
        }
      ],
      "source": [
        "import heapq\n",
        "\n",
        "# Node class for storing position, cost, and parent\n",
        "class Node:\n",
        "    def __init__(self, position, parent=None):\n",
        "        self.position = position\n",
        "        self.parent = parent\n",
        "        self.g = 0  # Cost from start to current\n",
        "        self.h = 0  # Heuristic (estimated cost to goal)\n",
        "        self.f = 0  # Total cost\n",
        "\n",
        "    def __lt__(self, other):\n",
        "        return self.f < other.f\n",
        "\n",
        "# Heuristic function: Manhattan distance\n",
        "def heuristic(a, b):\n",
        "    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n",
        "\n",
        "# A* Search\n",
        "def astar(grid, start, end):\n",
        "    open_list = []\n",
        "    closed_set = set()\n",
        "\n",
        "    start_node = Node(start)\n",
        "    end_node = Node(end)\n",
        "    heapq.heappush(open_list, start_node)\n",
        "\n",
        "    while open_list:\n",
        "        current_node = heapq.heappop(open_list)\n",
        "        closed_set.add(current_node.position)\n",
        "\n",
        "        # Found the goal\n",
        "        if current_node.position == end_node.position:\n",
        "            path = []\n",
        "            while current_node:\n",
        "                path.append(current_node.position)\n",
        "                current_node = current_node.parent\n",
        "            return path[::-1]  # Return reversed path\n",
        "\n",
        "        # Explore neighbors (up, down, left, right)\n",
        "        neighbors = [\n",
        "            (0, -1), (0, 1),\n",
        "            (-1, 0), (1, 0)\n",
        "        ]\n",
        "\n",
        "        for dx, dy in neighbors:\n",
        "            neighbor_pos = (current_node.position[0] + dx, current_node.position[1] + dy)\n",
        "\n",
        "            if (0 <= neighbor_pos[0] < len(grid) and\n",
        "                0 <= neighbor_pos[1] < len(grid[0]) and\n",
        "                grid[neighbor_pos[0]][neighbor_pos[1]] == 0 and\n",
        "                neighbor_pos not in closed_set):\n",
        "\n",
        "                neighbor_node = Node(neighbor_pos, current_node)\n",
        "                neighbor_node.g = current_node.g + 1\n",
        "                neighbor_node.h = heuristic(neighbor_pos, end_node.position)\n",
        "                neighbor_node.f = neighbor_node.g + neighbor_node.h\n",
        "\n",
        "                # Check if node with same position and lower cost exists in open_list\n",
        "                if all(not (n.position == neighbor_node.position and n.f <= neighbor_node.f) for n in open_list):\n",
        "                    heapq.heappush(open_list, neighbor_node)\n",
        "\n",
        "    return None  # No path found\n",
        "\n",
        "# Example usage\n",
        "if __name__ == \"__main__\":\n",
        "    grid = [\n",
        "        [0, 0, 0, 0, 0],\n",
        "        [1, 1, 0, 1, 0],\n",
        "        [0, 0, 0, 1, 0],\n",
        "        [0, 1, 1, 0, 0],\n",
        "        [0, 0, 0, 0, 0],\n",
        "    ]\n",
        "\n",
        "    start = (0, 0)\n",
        "    end = (4, 4)\n",
        "\n",
        "    path = astar(grid, start, end)\n",
        "\n",
        "    if path:\n",
        "        print(\"Path found:\")\n",
        "        print(path)\n",
        "    else:\n",
        "        print(\"No path found.\")\n"
      ]
    }
  ]
}